/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spirit.essential.rpc.protocol.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-08-22")
public class ApplicationInfo implements org.apache.thrift.TBase<ApplicationInfo, ApplicationInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PPID_FIELD_DESC = new org.apache.thrift.protocol.TField("ppid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UPSTREAM_FLOW_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("upstream_flow_total", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField UPSTREAM_FLOW_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("upstream_flow_bytes", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DOWNSTREAM_FLOW_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("downstream_flow_total", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOWNSTREAM_FLOW_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("downstream_flow_bytes", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CURRENT_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("current_connections", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_connections", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplicationInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplicationInfoTupleSchemeFactory();

  public int pid; // required
  public int ppid; // required
  public int upstream_flow_total; // required
  public int upstream_flow_bytes; // required
  public int downstream_flow_total; // required
  public int downstream_flow_bytes; // required
  public int current_connections; // required
  public int max_connections; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PPID((short)2, "ppid"),
    UPSTREAM_FLOW_TOTAL((short)3, "upstream_flow_total"),
    UPSTREAM_FLOW_BYTES((short)4, "upstream_flow_bytes"),
    DOWNSTREAM_FLOW_TOTAL((short)5, "downstream_flow_total"),
    DOWNSTREAM_FLOW_BYTES((short)6, "downstream_flow_bytes"),
    CURRENT_CONNECTIONS((short)7, "current_connections"),
    MAX_CONNECTIONS((short)8, "max_connections");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PPID
          return PPID;
        case 3: // UPSTREAM_FLOW_TOTAL
          return UPSTREAM_FLOW_TOTAL;
        case 4: // UPSTREAM_FLOW_BYTES
          return UPSTREAM_FLOW_BYTES;
        case 5: // DOWNSTREAM_FLOW_TOTAL
          return DOWNSTREAM_FLOW_TOTAL;
        case 6: // DOWNSTREAM_FLOW_BYTES
          return DOWNSTREAM_FLOW_BYTES;
        case 7: // CURRENT_CONNECTIONS
          return CURRENT_CONNECTIONS;
        case 8: // MAX_CONNECTIONS
          return MAX_CONNECTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PPID_ISSET_ID = 1;
  private static final int __UPSTREAM_FLOW_TOTAL_ISSET_ID = 2;
  private static final int __UPSTREAM_FLOW_BYTES_ISSET_ID = 3;
  private static final int __DOWNSTREAM_FLOW_TOTAL_ISSET_ID = 4;
  private static final int __DOWNSTREAM_FLOW_BYTES_ISSET_ID = 5;
  private static final int __CURRENT_CONNECTIONS_ISSET_ID = 6;
  private static final int __MAX_CONNECTIONS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PPID, new org.apache.thrift.meta_data.FieldMetaData("ppid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPSTREAM_FLOW_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("upstream_flow_total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPSTREAM_FLOW_BYTES, new org.apache.thrift.meta_data.FieldMetaData("upstream_flow_bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWNSTREAM_FLOW_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("downstream_flow_total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWNSTREAM_FLOW_BYTES, new org.apache.thrift.meta_data.FieldMetaData("downstream_flow_bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("current_connections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("max_connections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationInfo.class, metaDataMap);
  }

  public ApplicationInfo() {
  }

  public ApplicationInfo(
    int pid,
    int ppid,
    int upstream_flow_total,
    int upstream_flow_bytes,
    int downstream_flow_total,
    int downstream_flow_bytes,
    int current_connections,
    int max_connections)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.ppid = ppid;
    setPpidIsSet(true);
    this.upstream_flow_total = upstream_flow_total;
    setUpstream_flow_totalIsSet(true);
    this.upstream_flow_bytes = upstream_flow_bytes;
    setUpstream_flow_bytesIsSet(true);
    this.downstream_flow_total = downstream_flow_total;
    setDownstream_flow_totalIsSet(true);
    this.downstream_flow_bytes = downstream_flow_bytes;
    setDownstream_flow_bytesIsSet(true);
    this.current_connections = current_connections;
    setCurrent_connectionsIsSet(true);
    this.max_connections = max_connections;
    setMax_connectionsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationInfo(ApplicationInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.ppid = other.ppid;
    this.upstream_flow_total = other.upstream_flow_total;
    this.upstream_flow_bytes = other.upstream_flow_bytes;
    this.downstream_flow_total = other.downstream_flow_total;
    this.downstream_flow_bytes = other.downstream_flow_bytes;
    this.current_connections = other.current_connections;
    this.max_connections = other.max_connections;
  }

  public ApplicationInfo deepCopy() {
    return new ApplicationInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setPpidIsSet(false);
    this.ppid = 0;
    setUpstream_flow_totalIsSet(false);
    this.upstream_flow_total = 0;
    setUpstream_flow_bytesIsSet(false);
    this.upstream_flow_bytes = 0;
    setDownstream_flow_totalIsSet(false);
    this.downstream_flow_total = 0;
    setDownstream_flow_bytesIsSet(false);
    this.downstream_flow_bytes = 0;
    setCurrent_connectionsIsSet(false);
    this.current_connections = 0;
    setMax_connectionsIsSet(false);
    this.max_connections = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ApplicationInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getPpid() {
    return this.ppid;
  }

  public ApplicationInfo setPpid(int ppid) {
    this.ppid = ppid;
    setPpidIsSet(true);
    return this;
  }

  public void unsetPpid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PPID_ISSET_ID);
  }

  /** Returns true if field ppid is set (has been assigned a value) and false otherwise */
  public boolean isSetPpid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PPID_ISSET_ID);
  }

  public void setPpidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PPID_ISSET_ID, value);
  }

  public int getUpstream_flow_total() {
    return this.upstream_flow_total;
  }

  public ApplicationInfo setUpstream_flow_total(int upstream_flow_total) {
    this.upstream_flow_total = upstream_flow_total;
    setUpstream_flow_totalIsSet(true);
    return this;
  }

  public void unsetUpstream_flow_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPSTREAM_FLOW_TOTAL_ISSET_ID);
  }

  /** Returns true if field upstream_flow_total is set (has been assigned a value) and false otherwise */
  public boolean isSetUpstream_flow_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPSTREAM_FLOW_TOTAL_ISSET_ID);
  }

  public void setUpstream_flow_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPSTREAM_FLOW_TOTAL_ISSET_ID, value);
  }

  public int getUpstream_flow_bytes() {
    return this.upstream_flow_bytes;
  }

  public ApplicationInfo setUpstream_flow_bytes(int upstream_flow_bytes) {
    this.upstream_flow_bytes = upstream_flow_bytes;
    setUpstream_flow_bytesIsSet(true);
    return this;
  }

  public void unsetUpstream_flow_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPSTREAM_FLOW_BYTES_ISSET_ID);
  }

  /** Returns true if field upstream_flow_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetUpstream_flow_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPSTREAM_FLOW_BYTES_ISSET_ID);
  }

  public void setUpstream_flow_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPSTREAM_FLOW_BYTES_ISSET_ID, value);
  }

  public int getDownstream_flow_total() {
    return this.downstream_flow_total;
  }

  public ApplicationInfo setDownstream_flow_total(int downstream_flow_total) {
    this.downstream_flow_total = downstream_flow_total;
    setDownstream_flow_totalIsSet(true);
    return this;
  }

  public void unsetDownstream_flow_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOWNSTREAM_FLOW_TOTAL_ISSET_ID);
  }

  /** Returns true if field downstream_flow_total is set (has been assigned a value) and false otherwise */
  public boolean isSetDownstream_flow_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOWNSTREAM_FLOW_TOTAL_ISSET_ID);
  }

  public void setDownstream_flow_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOWNSTREAM_FLOW_TOTAL_ISSET_ID, value);
  }

  public int getDownstream_flow_bytes() {
    return this.downstream_flow_bytes;
  }

  public ApplicationInfo setDownstream_flow_bytes(int downstream_flow_bytes) {
    this.downstream_flow_bytes = downstream_flow_bytes;
    setDownstream_flow_bytesIsSet(true);
    return this;
  }

  public void unsetDownstream_flow_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOWNSTREAM_FLOW_BYTES_ISSET_ID);
  }

  /** Returns true if field downstream_flow_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetDownstream_flow_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOWNSTREAM_FLOW_BYTES_ISSET_ID);
  }

  public void setDownstream_flow_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOWNSTREAM_FLOW_BYTES_ISSET_ID, value);
  }

  public int getCurrent_connections() {
    return this.current_connections;
  }

  public ApplicationInfo setCurrent_connections(int current_connections) {
    this.current_connections = current_connections;
    setCurrent_connectionsIsSet(true);
    return this;
  }

  public void unsetCurrent_connections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENT_CONNECTIONS_ISSET_ID);
  }

  /** Returns true if field current_connections is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_connections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENT_CONNECTIONS_ISSET_ID);
  }

  public void setCurrent_connectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENT_CONNECTIONS_ISSET_ID, value);
  }

  public int getMax_connections() {
    return this.max_connections;
  }

  public ApplicationInfo setMax_connections(int max_connections) {
    this.max_connections = max_connections;
    setMax_connectionsIsSet(true);
    return this;
  }

  public void unsetMax_connections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_CONNECTIONS_ISSET_ID);
  }

  /** Returns true if field max_connections is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_connections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_CONNECTIONS_ISSET_ID);
  }

  public void setMax_connectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_CONNECTIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((java.lang.Integer)value);
      }
      break;

    case PPID:
      if (value == null) {
        unsetPpid();
      } else {
        setPpid((java.lang.Integer)value);
      }
      break;

    case UPSTREAM_FLOW_TOTAL:
      if (value == null) {
        unsetUpstream_flow_total();
      } else {
        setUpstream_flow_total((java.lang.Integer)value);
      }
      break;

    case UPSTREAM_FLOW_BYTES:
      if (value == null) {
        unsetUpstream_flow_bytes();
      } else {
        setUpstream_flow_bytes((java.lang.Integer)value);
      }
      break;

    case DOWNSTREAM_FLOW_TOTAL:
      if (value == null) {
        unsetDownstream_flow_total();
      } else {
        setDownstream_flow_total((java.lang.Integer)value);
      }
      break;

    case DOWNSTREAM_FLOW_BYTES:
      if (value == null) {
        unsetDownstream_flow_bytes();
      } else {
        setDownstream_flow_bytes((java.lang.Integer)value);
      }
      break;

    case CURRENT_CONNECTIONS:
      if (value == null) {
        unsetCurrent_connections();
      } else {
        setCurrent_connections((java.lang.Integer)value);
      }
      break;

    case MAX_CONNECTIONS:
      if (value == null) {
        unsetMax_connections();
      } else {
        setMax_connections((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return getPid();

    case PPID:
      return getPpid();

    case UPSTREAM_FLOW_TOTAL:
      return getUpstream_flow_total();

    case UPSTREAM_FLOW_BYTES:
      return getUpstream_flow_bytes();

    case DOWNSTREAM_FLOW_TOTAL:
      return getDownstream_flow_total();

    case DOWNSTREAM_FLOW_BYTES:
      return getDownstream_flow_bytes();

    case CURRENT_CONNECTIONS:
      return getCurrent_connections();

    case MAX_CONNECTIONS:
      return getMax_connections();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PPID:
      return isSetPpid();
    case UPSTREAM_FLOW_TOTAL:
      return isSetUpstream_flow_total();
    case UPSTREAM_FLOW_BYTES:
      return isSetUpstream_flow_bytes();
    case DOWNSTREAM_FLOW_TOTAL:
      return isSetDownstream_flow_total();
    case DOWNSTREAM_FLOW_BYTES:
      return isSetDownstream_flow_bytes();
    case CURRENT_CONNECTIONS:
      return isSetCurrent_connections();
    case MAX_CONNECTIONS:
      return isSetMax_connections();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationInfo)
      return this.equals((ApplicationInfo)that);
    return false;
  }

  public boolean equals(ApplicationInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_ppid = true;
    boolean that_present_ppid = true;
    if (this_present_ppid || that_present_ppid) {
      if (!(this_present_ppid && that_present_ppid))
        return false;
      if (this.ppid != that.ppid)
        return false;
    }

    boolean this_present_upstream_flow_total = true;
    boolean that_present_upstream_flow_total = true;
    if (this_present_upstream_flow_total || that_present_upstream_flow_total) {
      if (!(this_present_upstream_flow_total && that_present_upstream_flow_total))
        return false;
      if (this.upstream_flow_total != that.upstream_flow_total)
        return false;
    }

    boolean this_present_upstream_flow_bytes = true;
    boolean that_present_upstream_flow_bytes = true;
    if (this_present_upstream_flow_bytes || that_present_upstream_flow_bytes) {
      if (!(this_present_upstream_flow_bytes && that_present_upstream_flow_bytes))
        return false;
      if (this.upstream_flow_bytes != that.upstream_flow_bytes)
        return false;
    }

    boolean this_present_downstream_flow_total = true;
    boolean that_present_downstream_flow_total = true;
    if (this_present_downstream_flow_total || that_present_downstream_flow_total) {
      if (!(this_present_downstream_flow_total && that_present_downstream_flow_total))
        return false;
      if (this.downstream_flow_total != that.downstream_flow_total)
        return false;
    }

    boolean this_present_downstream_flow_bytes = true;
    boolean that_present_downstream_flow_bytes = true;
    if (this_present_downstream_flow_bytes || that_present_downstream_flow_bytes) {
      if (!(this_present_downstream_flow_bytes && that_present_downstream_flow_bytes))
        return false;
      if (this.downstream_flow_bytes != that.downstream_flow_bytes)
        return false;
    }

    boolean this_present_current_connections = true;
    boolean that_present_current_connections = true;
    if (this_present_current_connections || that_present_current_connections) {
      if (!(this_present_current_connections && that_present_current_connections))
        return false;
      if (this.current_connections != that.current_connections)
        return false;
    }

    boolean this_present_max_connections = true;
    boolean that_present_max_connections = true;
    if (this_present_max_connections || that_present_max_connections) {
      if (!(this_present_max_connections && that_present_max_connections))
        return false;
      if (this.max_connections != that.max_connections)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + pid;

    hashCode = hashCode * 8191 + ppid;

    hashCode = hashCode * 8191 + upstream_flow_total;

    hashCode = hashCode * 8191 + upstream_flow_bytes;

    hashCode = hashCode * 8191 + downstream_flow_total;

    hashCode = hashCode * 8191 + downstream_flow_bytes;

    hashCode = hashCode * 8191 + current_connections;

    hashCode = hashCode * 8191 + max_connections;

    return hashCode;
  }

  @Override
  public int compareTo(ApplicationInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPpid()).compareTo(other.isSetPpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ppid, other.ppid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpstream_flow_total()).compareTo(other.isSetUpstream_flow_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpstream_flow_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upstream_flow_total, other.upstream_flow_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpstream_flow_bytes()).compareTo(other.isSetUpstream_flow_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpstream_flow_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upstream_flow_bytes, other.upstream_flow_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownstream_flow_total()).compareTo(other.isSetDownstream_flow_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownstream_flow_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downstream_flow_total, other.downstream_flow_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownstream_flow_bytes()).compareTo(other.isSetDownstream_flow_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownstream_flow_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downstream_flow_bytes, other.downstream_flow_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrent_connections()).compareTo(other.isSetCurrent_connections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_connections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_connections, other.current_connections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_connections()).compareTo(other.isSetMax_connections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_connections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_connections, other.max_connections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ApplicationInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ppid:");
    sb.append(this.ppid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upstream_flow_total:");
    sb.append(this.upstream_flow_total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upstream_flow_bytes:");
    sb.append(this.upstream_flow_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downstream_flow_total:");
    sb.append(this.downstream_flow_total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downstream_flow_bytes:");
    sb.append(this.downstream_flow_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_connections:");
    sb.append(this.current_connections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_connections:");
    sb.append(this.max_connections);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationInfoStandardScheme getScheme() {
      return new ApplicationInfoStandardScheme();
    }
  }

  private static class ApplicationInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApplicationInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ppid = iprot.readI32();
              struct.setPpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPSTREAM_FLOW_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upstream_flow_total = iprot.readI32();
              struct.setUpstream_flow_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPSTREAM_FLOW_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upstream_flow_bytes = iprot.readI32();
              struct.setUpstream_flow_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOWNSTREAM_FLOW_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.downstream_flow_total = iprot.readI32();
              struct.setDownstream_flow_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOWNSTREAM_FLOW_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.downstream_flow_bytes = iprot.readI32();
              struct.setDownstream_flow_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRENT_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.current_connections = iprot.readI32();
              struct.setCurrent_connectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_connections = iprot.readI32();
              struct.setMax_connectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PPID_FIELD_DESC);
      oprot.writeI32(struct.ppid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPSTREAM_FLOW_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.upstream_flow_total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPSTREAM_FLOW_BYTES_FIELD_DESC);
      oprot.writeI32(struct.upstream_flow_bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOWNSTREAM_FLOW_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.downstream_flow_total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOWNSTREAM_FLOW_BYTES_FIELD_DESC);
      oprot.writeI32(struct.downstream_flow_bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.current_connections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_CONNECTIONS_FIELD_DESC);
      oprot.writeI32(struct.max_connections);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationInfoTupleScheme getScheme() {
      return new ApplicationInfoTupleScheme();
    }
  }

  private static class ApplicationInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApplicationInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetPpid()) {
        optionals.set(1);
      }
      if (struct.isSetUpstream_flow_total()) {
        optionals.set(2);
      }
      if (struct.isSetUpstream_flow_bytes()) {
        optionals.set(3);
      }
      if (struct.isSetDownstream_flow_total()) {
        optionals.set(4);
      }
      if (struct.isSetDownstream_flow_bytes()) {
        optionals.set(5);
      }
      if (struct.isSetCurrent_connections()) {
        optionals.set(6);
      }
      if (struct.isSetMax_connections()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetPpid()) {
        oprot.writeI32(struct.ppid);
      }
      if (struct.isSetUpstream_flow_total()) {
        oprot.writeI32(struct.upstream_flow_total);
      }
      if (struct.isSetUpstream_flow_bytes()) {
        oprot.writeI32(struct.upstream_flow_bytes);
      }
      if (struct.isSetDownstream_flow_total()) {
        oprot.writeI32(struct.downstream_flow_total);
      }
      if (struct.isSetDownstream_flow_bytes()) {
        oprot.writeI32(struct.downstream_flow_bytes);
      }
      if (struct.isSetCurrent_connections()) {
        oprot.writeI32(struct.current_connections);
      }
      if (struct.isSetMax_connections()) {
        oprot.writeI32(struct.max_connections);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ppid = iprot.readI32();
        struct.setPpidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.upstream_flow_total = iprot.readI32();
        struct.setUpstream_flow_totalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.upstream_flow_bytes = iprot.readI32();
        struct.setUpstream_flow_bytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.downstream_flow_total = iprot.readI32();
        struct.setDownstream_flow_totalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.downstream_flow_bytes = iprot.readI32();
        struct.setDownstream_flow_bytesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.current_connections = iprot.readI32();
        struct.setCurrent_connectionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max_connections = iprot.readI32();
        struct.setMax_connectionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


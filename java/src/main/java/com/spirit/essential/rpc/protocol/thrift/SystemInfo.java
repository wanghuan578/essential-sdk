/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.spirit.essential.rpc.protocol.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-08-22")
public class SystemInfo implements org.apache.thrift.TBase<SystemInfo, SystemInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SystemInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemInfo");

  private static final org.apache.thrift.protocol.TField TASK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("task_num", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_num", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_percent", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MEM_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_total", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MEM_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_used", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MEM_AVAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_avail", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MEM_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_percent", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SWAP_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("swap_total", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SWAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("swap_used", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SWAP_AVAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("swap_avail", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SWAP_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("swap_percent", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField LOAD_AVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("load_average", org.apache.thrift.protocol.TType.DOUBLE, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SystemInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SystemInfoTupleSchemeFactory();

  public int task_num; // required
  public short cpu_num; // required
  public double cpu_percent; // required
  public int mem_total; // required
  public int mem_used; // required
  public long mem_avail; // required
  public double mem_percent; // required
  public int swap_total; // required
  public int swap_used; // required
  public int swap_avail; // required
  public double swap_percent; // required
  public double load_average; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_NUM((short)1, "task_num"),
    CPU_NUM((short)2, "cpu_num"),
    CPU_PERCENT((short)3, "cpu_percent"),
    MEM_TOTAL((short)4, "mem_total"),
    MEM_USED((short)5, "mem_used"),
    MEM_AVAIL((short)6, "mem_avail"),
    MEM_PERCENT((short)7, "mem_percent"),
    SWAP_TOTAL((short)8, "swap_total"),
    SWAP_USED((short)9, "swap_used"),
    SWAP_AVAIL((short)10, "swap_avail"),
    SWAP_PERCENT((short)11, "swap_percent"),
    LOAD_AVERAGE((short)12, "load_average");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_NUM
          return TASK_NUM;
        case 2: // CPU_NUM
          return CPU_NUM;
        case 3: // CPU_PERCENT
          return CPU_PERCENT;
        case 4: // MEM_TOTAL
          return MEM_TOTAL;
        case 5: // MEM_USED
          return MEM_USED;
        case 6: // MEM_AVAIL
          return MEM_AVAIL;
        case 7: // MEM_PERCENT
          return MEM_PERCENT;
        case 8: // SWAP_TOTAL
          return SWAP_TOTAL;
        case 9: // SWAP_USED
          return SWAP_USED;
        case 10: // SWAP_AVAIL
          return SWAP_AVAIL;
        case 11: // SWAP_PERCENT
          return SWAP_PERCENT;
        case 12: // LOAD_AVERAGE
          return LOAD_AVERAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASK_NUM_ISSET_ID = 0;
  private static final int __CPU_NUM_ISSET_ID = 1;
  private static final int __CPU_PERCENT_ISSET_ID = 2;
  private static final int __MEM_TOTAL_ISSET_ID = 3;
  private static final int __MEM_USED_ISSET_ID = 4;
  private static final int __MEM_AVAIL_ISSET_ID = 5;
  private static final int __MEM_PERCENT_ISSET_ID = 6;
  private static final int __SWAP_TOTAL_ISSET_ID = 7;
  private static final int __SWAP_USED_ISSET_ID = 8;
  private static final int __SWAP_AVAIL_ISSET_ID = 9;
  private static final int __SWAP_PERCENT_ISSET_ID = 10;
  private static final int __LOAD_AVERAGE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_NUM, new org.apache.thrift.meta_data.FieldMetaData("task_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_NUM, new org.apache.thrift.meta_data.FieldMetaData("cpu_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CPU_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("cpu_percent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEM_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("mem_total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_USED, new org.apache.thrift.meta_data.FieldMetaData("mem_used", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_AVAIL, new org.apache.thrift.meta_data.FieldMetaData("mem_avail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("mem_percent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SWAP_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("swap_total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SWAP_USED, new org.apache.thrift.meta_data.FieldMetaData("swap_used", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SWAP_AVAIL, new org.apache.thrift.meta_data.FieldMetaData("swap_avail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SWAP_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("swap_percent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAD_AVERAGE, new org.apache.thrift.meta_data.FieldMetaData("load_average", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemInfo.class, metaDataMap);
  }

  public SystemInfo() {
  }

  public SystemInfo(
    int task_num,
    short cpu_num,
    double cpu_percent,
    int mem_total,
    int mem_used,
    long mem_avail,
    double mem_percent,
    int swap_total,
    int swap_used,
    int swap_avail,
    double swap_percent,
    double load_average)
  {
    this();
    this.task_num = task_num;
    setTask_numIsSet(true);
    this.cpu_num = cpu_num;
    setCpu_numIsSet(true);
    this.cpu_percent = cpu_percent;
    setCpu_percentIsSet(true);
    this.mem_total = mem_total;
    setMem_totalIsSet(true);
    this.mem_used = mem_used;
    setMem_usedIsSet(true);
    this.mem_avail = mem_avail;
    setMem_availIsSet(true);
    this.mem_percent = mem_percent;
    setMem_percentIsSet(true);
    this.swap_total = swap_total;
    setSwap_totalIsSet(true);
    this.swap_used = swap_used;
    setSwap_usedIsSet(true);
    this.swap_avail = swap_avail;
    setSwap_availIsSet(true);
    this.swap_percent = swap_percent;
    setSwap_percentIsSet(true);
    this.load_average = load_average;
    setLoad_averageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemInfo(SystemInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.task_num = other.task_num;
    this.cpu_num = other.cpu_num;
    this.cpu_percent = other.cpu_percent;
    this.mem_total = other.mem_total;
    this.mem_used = other.mem_used;
    this.mem_avail = other.mem_avail;
    this.mem_percent = other.mem_percent;
    this.swap_total = other.swap_total;
    this.swap_used = other.swap_used;
    this.swap_avail = other.swap_avail;
    this.swap_percent = other.swap_percent;
    this.load_average = other.load_average;
  }

  public SystemInfo deepCopy() {
    return new SystemInfo(this);
  }

  @Override
  public void clear() {
    setTask_numIsSet(false);
    this.task_num = 0;
    setCpu_numIsSet(false);
    this.cpu_num = 0;
    setCpu_percentIsSet(false);
    this.cpu_percent = 0.0;
    setMem_totalIsSet(false);
    this.mem_total = 0;
    setMem_usedIsSet(false);
    this.mem_used = 0;
    setMem_availIsSet(false);
    this.mem_avail = 0;
    setMem_percentIsSet(false);
    this.mem_percent = 0.0;
    setSwap_totalIsSet(false);
    this.swap_total = 0;
    setSwap_usedIsSet(false);
    this.swap_used = 0;
    setSwap_availIsSet(false);
    this.swap_avail = 0;
    setSwap_percentIsSet(false);
    this.swap_percent = 0.0;
    setLoad_averageIsSet(false);
    this.load_average = 0.0;
  }

  public int getTask_num() {
    return this.task_num;
  }

  public SystemInfo setTask_num(int task_num) {
    this.task_num = task_num;
    setTask_numIsSet(true);
    return this;
  }

  public void unsetTask_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASK_NUM_ISSET_ID);
  }

  /** Returns true if field task_num is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASK_NUM_ISSET_ID);
  }

  public void setTask_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASK_NUM_ISSET_ID, value);
  }

  public short getCpu_num() {
    return this.cpu_num;
  }

  public SystemInfo setCpu_num(short cpu_num) {
    this.cpu_num = cpu_num;
    setCpu_numIsSet(true);
    return this;
  }

  public void unsetCpu_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_NUM_ISSET_ID);
  }

  /** Returns true if field cpu_num is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_NUM_ISSET_ID);
  }

  public void setCpu_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_NUM_ISSET_ID, value);
  }

  public double getCpu_percent() {
    return this.cpu_percent;
  }

  public SystemInfo setCpu_percent(double cpu_percent) {
    this.cpu_percent = cpu_percent;
    setCpu_percentIsSet(true);
    return this;
  }

  public void unsetCpu_percent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_PERCENT_ISSET_ID);
  }

  /** Returns true if field cpu_percent is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_percent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_PERCENT_ISSET_ID);
  }

  public void setCpu_percentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_PERCENT_ISSET_ID, value);
  }

  public int getMem_total() {
    return this.mem_total;
  }

  public SystemInfo setMem_total(int mem_total) {
    this.mem_total = mem_total;
    setMem_totalIsSet(true);
    return this;
  }

  public void unsetMem_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_TOTAL_ISSET_ID);
  }

  /** Returns true if field mem_total is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_TOTAL_ISSET_ID);
  }

  public void setMem_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_TOTAL_ISSET_ID, value);
  }

  public int getMem_used() {
    return this.mem_used;
  }

  public SystemInfo setMem_used(int mem_used) {
    this.mem_used = mem_used;
    setMem_usedIsSet(true);
    return this;
  }

  public void unsetMem_used() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_USED_ISSET_ID);
  }

  /** Returns true if field mem_used is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_used() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_USED_ISSET_ID);
  }

  public void setMem_usedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_USED_ISSET_ID, value);
  }

  public long getMem_avail() {
    return this.mem_avail;
  }

  public SystemInfo setMem_avail(long mem_avail) {
    this.mem_avail = mem_avail;
    setMem_availIsSet(true);
    return this;
  }

  public void unsetMem_avail() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_AVAIL_ISSET_ID);
  }

  /** Returns true if field mem_avail is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_avail() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_AVAIL_ISSET_ID);
  }

  public void setMem_availIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_AVAIL_ISSET_ID, value);
  }

  public double getMem_percent() {
    return this.mem_percent;
  }

  public SystemInfo setMem_percent(double mem_percent) {
    this.mem_percent = mem_percent;
    setMem_percentIsSet(true);
    return this;
  }

  public void unsetMem_percent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_PERCENT_ISSET_ID);
  }

  /** Returns true if field mem_percent is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_percent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_PERCENT_ISSET_ID);
  }

  public void setMem_percentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_PERCENT_ISSET_ID, value);
  }

  public int getSwap_total() {
    return this.swap_total;
  }

  public SystemInfo setSwap_total(int swap_total) {
    this.swap_total = swap_total;
    setSwap_totalIsSet(true);
    return this;
  }

  public void unsetSwap_total() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SWAP_TOTAL_ISSET_ID);
  }

  /** Returns true if field swap_total is set (has been assigned a value) and false otherwise */
  public boolean isSetSwap_total() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SWAP_TOTAL_ISSET_ID);
  }

  public void setSwap_totalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SWAP_TOTAL_ISSET_ID, value);
  }

  public int getSwap_used() {
    return this.swap_used;
  }

  public SystemInfo setSwap_used(int swap_used) {
    this.swap_used = swap_used;
    setSwap_usedIsSet(true);
    return this;
  }

  public void unsetSwap_used() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SWAP_USED_ISSET_ID);
  }

  /** Returns true if field swap_used is set (has been assigned a value) and false otherwise */
  public boolean isSetSwap_used() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SWAP_USED_ISSET_ID);
  }

  public void setSwap_usedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SWAP_USED_ISSET_ID, value);
  }

  public int getSwap_avail() {
    return this.swap_avail;
  }

  public SystemInfo setSwap_avail(int swap_avail) {
    this.swap_avail = swap_avail;
    setSwap_availIsSet(true);
    return this;
  }

  public void unsetSwap_avail() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SWAP_AVAIL_ISSET_ID);
  }

  /** Returns true if field swap_avail is set (has been assigned a value) and false otherwise */
  public boolean isSetSwap_avail() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SWAP_AVAIL_ISSET_ID);
  }

  public void setSwap_availIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SWAP_AVAIL_ISSET_ID, value);
  }

  public double getSwap_percent() {
    return this.swap_percent;
  }

  public SystemInfo setSwap_percent(double swap_percent) {
    this.swap_percent = swap_percent;
    setSwap_percentIsSet(true);
    return this;
  }

  public void unsetSwap_percent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SWAP_PERCENT_ISSET_ID);
  }

  /** Returns true if field swap_percent is set (has been assigned a value) and false otherwise */
  public boolean isSetSwap_percent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SWAP_PERCENT_ISSET_ID);
  }

  public void setSwap_percentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SWAP_PERCENT_ISSET_ID, value);
  }

  public double getLoad_average() {
    return this.load_average;
  }

  public SystemInfo setLoad_average(double load_average) {
    this.load_average = load_average;
    setLoad_averageIsSet(true);
    return this;
  }

  public void unsetLoad_average() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_AVERAGE_ISSET_ID);
  }

  /** Returns true if field load_average is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_average() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_AVERAGE_ISSET_ID);
  }

  public void setLoad_averageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_AVERAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TASK_NUM:
      if (value == null) {
        unsetTask_num();
      } else {
        setTask_num((java.lang.Integer)value);
      }
      break;

    case CPU_NUM:
      if (value == null) {
        unsetCpu_num();
      } else {
        setCpu_num((java.lang.Short)value);
      }
      break;

    case CPU_PERCENT:
      if (value == null) {
        unsetCpu_percent();
      } else {
        setCpu_percent((java.lang.Double)value);
      }
      break;

    case MEM_TOTAL:
      if (value == null) {
        unsetMem_total();
      } else {
        setMem_total((java.lang.Integer)value);
      }
      break;

    case MEM_USED:
      if (value == null) {
        unsetMem_used();
      } else {
        setMem_used((java.lang.Integer)value);
      }
      break;

    case MEM_AVAIL:
      if (value == null) {
        unsetMem_avail();
      } else {
        setMem_avail((java.lang.Long)value);
      }
      break;

    case MEM_PERCENT:
      if (value == null) {
        unsetMem_percent();
      } else {
        setMem_percent((java.lang.Double)value);
      }
      break;

    case SWAP_TOTAL:
      if (value == null) {
        unsetSwap_total();
      } else {
        setSwap_total((java.lang.Integer)value);
      }
      break;

    case SWAP_USED:
      if (value == null) {
        unsetSwap_used();
      } else {
        setSwap_used((java.lang.Integer)value);
      }
      break;

    case SWAP_AVAIL:
      if (value == null) {
        unsetSwap_avail();
      } else {
        setSwap_avail((java.lang.Integer)value);
      }
      break;

    case SWAP_PERCENT:
      if (value == null) {
        unsetSwap_percent();
      } else {
        setSwap_percent((java.lang.Double)value);
      }
      break;

    case LOAD_AVERAGE:
      if (value == null) {
        unsetLoad_average();
      } else {
        setLoad_average((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_NUM:
      return getTask_num();

    case CPU_NUM:
      return getCpu_num();

    case CPU_PERCENT:
      return getCpu_percent();

    case MEM_TOTAL:
      return getMem_total();

    case MEM_USED:
      return getMem_used();

    case MEM_AVAIL:
      return getMem_avail();

    case MEM_PERCENT:
      return getMem_percent();

    case SWAP_TOTAL:
      return getSwap_total();

    case SWAP_USED:
      return getSwap_used();

    case SWAP_AVAIL:
      return getSwap_avail();

    case SWAP_PERCENT:
      return getSwap_percent();

    case LOAD_AVERAGE:
      return getLoad_average();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_NUM:
      return isSetTask_num();
    case CPU_NUM:
      return isSetCpu_num();
    case CPU_PERCENT:
      return isSetCpu_percent();
    case MEM_TOTAL:
      return isSetMem_total();
    case MEM_USED:
      return isSetMem_used();
    case MEM_AVAIL:
      return isSetMem_avail();
    case MEM_PERCENT:
      return isSetMem_percent();
    case SWAP_TOTAL:
      return isSetSwap_total();
    case SWAP_USED:
      return isSetSwap_used();
    case SWAP_AVAIL:
      return isSetSwap_avail();
    case SWAP_PERCENT:
      return isSetSwap_percent();
    case LOAD_AVERAGE:
      return isSetLoad_average();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemInfo)
      return this.equals((SystemInfo)that);
    return false;
  }

  public boolean equals(SystemInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_task_num = true;
    boolean that_present_task_num = true;
    if (this_present_task_num || that_present_task_num) {
      if (!(this_present_task_num && that_present_task_num))
        return false;
      if (this.task_num != that.task_num)
        return false;
    }

    boolean this_present_cpu_num = true;
    boolean that_present_cpu_num = true;
    if (this_present_cpu_num || that_present_cpu_num) {
      if (!(this_present_cpu_num && that_present_cpu_num))
        return false;
      if (this.cpu_num != that.cpu_num)
        return false;
    }

    boolean this_present_cpu_percent = true;
    boolean that_present_cpu_percent = true;
    if (this_present_cpu_percent || that_present_cpu_percent) {
      if (!(this_present_cpu_percent && that_present_cpu_percent))
        return false;
      if (this.cpu_percent != that.cpu_percent)
        return false;
    }

    boolean this_present_mem_total = true;
    boolean that_present_mem_total = true;
    if (this_present_mem_total || that_present_mem_total) {
      if (!(this_present_mem_total && that_present_mem_total))
        return false;
      if (this.mem_total != that.mem_total)
        return false;
    }

    boolean this_present_mem_used = true;
    boolean that_present_mem_used = true;
    if (this_present_mem_used || that_present_mem_used) {
      if (!(this_present_mem_used && that_present_mem_used))
        return false;
      if (this.mem_used != that.mem_used)
        return false;
    }

    boolean this_present_mem_avail = true;
    boolean that_present_mem_avail = true;
    if (this_present_mem_avail || that_present_mem_avail) {
      if (!(this_present_mem_avail && that_present_mem_avail))
        return false;
      if (this.mem_avail != that.mem_avail)
        return false;
    }

    boolean this_present_mem_percent = true;
    boolean that_present_mem_percent = true;
    if (this_present_mem_percent || that_present_mem_percent) {
      if (!(this_present_mem_percent && that_present_mem_percent))
        return false;
      if (this.mem_percent != that.mem_percent)
        return false;
    }

    boolean this_present_swap_total = true;
    boolean that_present_swap_total = true;
    if (this_present_swap_total || that_present_swap_total) {
      if (!(this_present_swap_total && that_present_swap_total))
        return false;
      if (this.swap_total != that.swap_total)
        return false;
    }

    boolean this_present_swap_used = true;
    boolean that_present_swap_used = true;
    if (this_present_swap_used || that_present_swap_used) {
      if (!(this_present_swap_used && that_present_swap_used))
        return false;
      if (this.swap_used != that.swap_used)
        return false;
    }

    boolean this_present_swap_avail = true;
    boolean that_present_swap_avail = true;
    if (this_present_swap_avail || that_present_swap_avail) {
      if (!(this_present_swap_avail && that_present_swap_avail))
        return false;
      if (this.swap_avail != that.swap_avail)
        return false;
    }

    boolean this_present_swap_percent = true;
    boolean that_present_swap_percent = true;
    if (this_present_swap_percent || that_present_swap_percent) {
      if (!(this_present_swap_percent && that_present_swap_percent))
        return false;
      if (this.swap_percent != that.swap_percent)
        return false;
    }

    boolean this_present_load_average = true;
    boolean that_present_load_average = true;
    if (this_present_load_average || that_present_load_average) {
      if (!(this_present_load_average && that_present_load_average))
        return false;
      if (this.load_average != that.load_average)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + task_num;

    hashCode = hashCode * 8191 + cpu_num;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpu_percent);

    hashCode = hashCode * 8191 + mem_total;

    hashCode = hashCode * 8191 + mem_used;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_avail);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_percent);

    hashCode = hashCode * 8191 + swap_total;

    hashCode = hashCode * 8191 + swap_used;

    hashCode = hashCode * 8191 + swap_avail;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(swap_percent);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_average);

    return hashCode;
  }

  @Override
  public int compareTo(SystemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTask_num()).compareTo(other.isSetTask_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_num, other.task_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpu_num()).compareTo(other.isSetCpu_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_num, other.cpu_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpu_percent()).compareTo(other.isSetCpu_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_percent, other.cpu_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMem_total()).compareTo(other.isSetMem_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_total, other.mem_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMem_used()).compareTo(other.isSetMem_used());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_used()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_used, other.mem_used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMem_avail()).compareTo(other.isSetMem_avail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_avail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_avail, other.mem_avail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMem_percent()).compareTo(other.isSetMem_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_percent, other.mem_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSwap_total()).compareTo(other.isSetSwap_total());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwap_total()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swap_total, other.swap_total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSwap_used()).compareTo(other.isSetSwap_used());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwap_used()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swap_used, other.swap_used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSwap_avail()).compareTo(other.isSetSwap_avail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwap_avail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swap_avail, other.swap_avail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSwap_percent()).compareTo(other.isSetSwap_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwap_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swap_percent, other.swap_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoad_average()).compareTo(other.isSetLoad_average());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_average()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_average, other.load_average);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SystemInfo(");
    boolean first = true;

    sb.append("task_num:");
    sb.append(this.task_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpu_num:");
    sb.append(this.cpu_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpu_percent:");
    sb.append(this.cpu_percent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_total:");
    sb.append(this.mem_total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_used:");
    sb.append(this.mem_used);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_avail:");
    sb.append(this.mem_avail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_percent:");
    sb.append(this.mem_percent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swap_total:");
    sb.append(this.swap_total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swap_used:");
    sb.append(this.swap_used);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swap_avail:");
    sb.append(this.swap_avail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swap_percent:");
    sb.append(this.swap_percent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("load_average:");
    sb.append(this.load_average);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemInfoStandardScheme getScheme() {
      return new SystemInfoStandardScheme();
    }
  }

  private static class SystemInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<SystemInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_num = iprot.readI32();
              struct.setTask_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.cpu_num = iprot.readI16();
              struct.setCpu_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpu_percent = iprot.readDouble();
              struct.setCpu_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEM_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mem_total = iprot.readI32();
              struct.setMem_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEM_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mem_used = iprot.readI32();
              struct.setMem_usedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEM_AVAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_avail = iprot.readI64();
              struct.setMem_availIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEM_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mem_percent = iprot.readDouble();
              struct.setMem_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SWAP_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.swap_total = iprot.readI32();
              struct.setSwap_totalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SWAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.swap_used = iprot.readI32();
              struct.setSwap_usedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SWAP_AVAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.swap_avail = iprot.readI32();
              struct.setSwap_availIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SWAP_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.swap_percent = iprot.readDouble();
              struct.setSwap_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAD_AVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.load_average = iprot.readDouble();
              struct.setLoad_averageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_NUM_FIELD_DESC);
      oprot.writeI32(struct.task_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_NUM_FIELD_DESC);
      oprot.writeI16(struct.cpu_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.cpu_percent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.mem_total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_USED_FIELD_DESC);
      oprot.writeI32(struct.mem_used);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_AVAIL_FIELD_DESC);
      oprot.writeI64(struct.mem_avail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.mem_percent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SWAP_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.swap_total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SWAP_USED_FIELD_DESC);
      oprot.writeI32(struct.swap_used);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SWAP_AVAIL_FIELD_DESC);
      oprot.writeI32(struct.swap_avail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SWAP_PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.swap_percent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD_AVERAGE_FIELD_DESC);
      oprot.writeDouble(struct.load_average);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemInfoTupleScheme getScheme() {
      return new SystemInfoTupleScheme();
    }
  }

  private static class SystemInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<SystemInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTask_num()) {
        optionals.set(0);
      }
      if (struct.isSetCpu_num()) {
        optionals.set(1);
      }
      if (struct.isSetCpu_percent()) {
        optionals.set(2);
      }
      if (struct.isSetMem_total()) {
        optionals.set(3);
      }
      if (struct.isSetMem_used()) {
        optionals.set(4);
      }
      if (struct.isSetMem_avail()) {
        optionals.set(5);
      }
      if (struct.isSetMem_percent()) {
        optionals.set(6);
      }
      if (struct.isSetSwap_total()) {
        optionals.set(7);
      }
      if (struct.isSetSwap_used()) {
        optionals.set(8);
      }
      if (struct.isSetSwap_avail()) {
        optionals.set(9);
      }
      if (struct.isSetSwap_percent()) {
        optionals.set(10);
      }
      if (struct.isSetLoad_average()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTask_num()) {
        oprot.writeI32(struct.task_num);
      }
      if (struct.isSetCpu_num()) {
        oprot.writeI16(struct.cpu_num);
      }
      if (struct.isSetCpu_percent()) {
        oprot.writeDouble(struct.cpu_percent);
      }
      if (struct.isSetMem_total()) {
        oprot.writeI32(struct.mem_total);
      }
      if (struct.isSetMem_used()) {
        oprot.writeI32(struct.mem_used);
      }
      if (struct.isSetMem_avail()) {
        oprot.writeI64(struct.mem_avail);
      }
      if (struct.isSetMem_percent()) {
        oprot.writeDouble(struct.mem_percent);
      }
      if (struct.isSetSwap_total()) {
        oprot.writeI32(struct.swap_total);
      }
      if (struct.isSetSwap_used()) {
        oprot.writeI32(struct.swap_used);
      }
      if (struct.isSetSwap_avail()) {
        oprot.writeI32(struct.swap_avail);
      }
      if (struct.isSetSwap_percent()) {
        oprot.writeDouble(struct.swap_percent);
      }
      if (struct.isSetLoad_average()) {
        oprot.writeDouble(struct.load_average);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.task_num = iprot.readI32();
        struct.setTask_numIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cpu_num = iprot.readI16();
        struct.setCpu_numIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpu_percent = iprot.readDouble();
        struct.setCpu_percentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mem_total = iprot.readI32();
        struct.setMem_totalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mem_used = iprot.readI32();
        struct.setMem_usedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mem_avail = iprot.readI64();
        struct.setMem_availIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mem_percent = iprot.readDouble();
        struct.setMem_percentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.swap_total = iprot.readI32();
        struct.setSwap_totalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.swap_used = iprot.readI32();
        struct.setSwap_usedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.swap_avail = iprot.readI32();
        struct.setSwap_availIsSet(true);
      }
      if (incoming.get(10)) {
        struct.swap_percent = iprot.readDouble();
        struct.setSwap_percentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.load_average = iprot.readDouble();
        struct.setLoad_averageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

